
drawbot_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bcc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e30  08002e30  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e30  08002e30  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e30  08002e30  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e34  08002e34  00003e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08002e44  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002e44  00004194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084bb  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  0000c4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068b  00000000  00000000  0000e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ae4  00000000  00000000  0000ed23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d98  00000000  00000000  00037807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8567  00000000  00000000  0004159f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139b06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002270  00000000  00000000  00139b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0013bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002d70 	.word	0x08002d70

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002d70 	.word	0x08002d70

080001fc <HX8357_Select>:
        0x80 + 50 / 5, // Main screen turn on, delay 50 ms
        0,             // END OF COMMAND LIST
};


static void HX8357_Select(HX8357_HandleTypeDef *display) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->cs_port, display->cs_pin, GPIO_PIN_RESET);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6858      	ldr	r0, [r3, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	891b      	ldrh	r3, [r3, #8]
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	f001 f8dc 	bl	80013cc <HAL_GPIO_WritePin>
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <HX8357_Unselect>:

static void HX8357_Unselect(HX8357_HandleTypeDef *display) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->cs_port, display->cs_pin, GPIO_PIN_SET);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6858      	ldr	r0, [r3, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	891b      	ldrh	r3, [r3, #8]
 800022c:	2201      	movs	r2, #1
 800022e:	4619      	mov	r1, r3
 8000230:	f001 f8cc 	bl	80013cc <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <HX8357_WriteCommand>:

static void HX8357_WriteCommand(HX8357_HandleTypeDef *display, uint8_t cmd) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(display->dc_port, display->dc_pin, GPIO_PIN_RESET); // Command mode
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	68d8      	ldr	r0, [r3, #12]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	8a1b      	ldrh	r3, [r3, #16]
 8000250:	2200      	movs	r2, #0
 8000252:	4619      	mov	r1, r3
 8000254:	f001 f8ba 	bl	80013cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(display->hspi, &cmd, 1, HAL_MAX_DELAY);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	1cf9      	adds	r1, r7, #3
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	2201      	movs	r2, #1
 8000264:	f002 f8e1 	bl	800242a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(display->dc_port, display->dc_pin, GPIO_PIN_SET);  // Back to data mode
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	68d8      	ldr	r0, [r3, #12]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	8a1b      	ldrh	r3, [r3, #16]
 8000270:	2201      	movs	r2, #1
 8000272:	4619      	mov	r1, r3
 8000274:	f001 f8aa 	bl	80013cc <HAL_GPIO_WritePin>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <HX8357_WriteData>:

static void HX8357_WriteData(HX8357_HandleTypeDef *display, const uint8_t* data, uint16_t size) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	4613      	mov	r3, r2
 800028c:	80fb      	strh	r3, [r7, #6]
    if (display->use_dma && size > 4) {
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	7cdb      	ldrb	r3, [r3, #19]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d020      	beq.n	80002d8 <HX8357_WriteData+0x58>
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	2b04      	cmp	r3, #4
 800029a:	d91d      	bls.n	80002d8 <HX8357_WriteData+0x58>
        while (dma_busy);
 800029c:	bf00      	nop
 800029e:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <HX8357_WriteData+0x74>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1fa      	bne.n	800029e <HX8357_WriteData+0x1e>
        if (size > HX8357_DMA_BUFFER_SIZE) {
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80002ae:	d902      	bls.n	80002b6 <HX8357_WriteData+0x36>
            size = HX8357_DMA_BUFFER_SIZE;
 80002b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b4:	80fb      	strh	r3, [r7, #6]
        }
        memcpy(dma_buffer, data, size);
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	461a      	mov	r2, r3
 80002ba:	68b9      	ldr	r1, [r7, #8]
 80002bc:	480e      	ldr	r0, [pc, #56]	@ (80002f8 <HX8357_WriteData+0x78>)
 80002be:	f002 fd49 	bl	8002d54 <memcpy>
        dma_busy = true;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <HX8357_WriteData+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit_DMA(display->hspi, dma_buffer, size);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	88fa      	ldrh	r2, [r7, #6]
 80002ce:	490a      	ldr	r1, [pc, #40]	@ (80002f8 <HX8357_WriteData+0x78>)
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fa21 	bl	8002718 <HAL_SPI_Transmit_DMA>
 80002d6:	e008      	b.n	80002ea <HX8357_WriteData+0x6a>
    } else {
        HAL_SPI_Transmit(display->hspi, (uint8_t*)data, size, HAL_MAX_DELAY);
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	6818      	ldr	r0, [r3, #0]
 80002dc:	88fa      	ldrh	r2, [r7, #6]
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	68b9      	ldr	r1, [r7, #8]
 80002e4:	f002 f8a1 	bl	800242a <HAL_SPI_Transmit>
    }
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000128 	.word	0x20000128
 80002f8:	20000028 	.word	0x20000028

080002fc <HX8357_Init>:

    return HX8357_OK;
}

// Public function implementations
HX8357_Status HX8357_Init(HX8357_HandleTypeDef *display) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
    if (!display || !display->hspi) return HX8357_PARAM_ERROR;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d003      	beq.n	8000312 <HX8357_Init+0x16>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d101      	bne.n	8000316 <HX8357_Init+0x1a>
 8000312:	2303      	movs	r3, #3
 8000314:	e068      	b.n	80003e8 <HX8357_Init+0xec>

    // Initial pin states
    HX8357_Unselect(display);
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ff80 	bl	800021c <HX8357_Unselect>
    HAL_GPIO_WritePin(display->dc_port, display->dc_pin, GPIO_PIN_SET);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68d8      	ldr	r0, [r3, #12]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	8a1b      	ldrh	r3, [r3, #16]
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	f001 f850 	bl	80013cc <HAL_GPIO_WritePin>

    // Process initialization sequence
    const uint8_t *addr = init_seq;
 800032c:	4b30      	ldr	r3, [pc, #192]	@ (80003f0 <HX8357_Init+0xf4>)
 800032e:	60fb      	str	r3, [r7, #12]
    uint8_t cmd, x, numArgs;

    while((cmd = *(addr++)) > 0) { // '0' command ends list
 8000330:	e03c      	b.n	80003ac <HX8357_Init+0xb0>
        x = *(addr++);
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	60fa      	str	r2, [r7, #12]
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	72bb      	strb	r3, [r7, #10]
        numArgs = x & 0x7F;
 800033c:	7abb      	ldrb	r3, [r7, #10]
 800033e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000342:	727b      	strb	r3, [r7, #9]
        if(cmd != 0xFF) { // '255' is ignored
 8000344:	7afb      	ldrb	r3, [r7, #11]
 8000346:	2bff      	cmp	r3, #255	@ 0xff
 8000348:	d025      	beq.n	8000396 <HX8357_Init+0x9a>
            if(x & 0x80) {  // If high bit set, numArgs is a delay time
 800034a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800034e:	2b00      	cmp	r3, #0
 8000350:	da0b      	bge.n	800036a <HX8357_Init+0x6e>
                HX8357_Select(display);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f7ff ff52 	bl	80001fc <HX8357_Select>
                HX8357_WriteCommand(display, cmd);
 8000358:	7afb      	ldrb	r3, [r7, #11]
 800035a:	4619      	mov	r1, r3
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f7ff ff6d 	bl	800023c <HX8357_WriteCommand>
                HX8357_Unselect(display);
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff5a 	bl	800021c <HX8357_Unselect>
 8000368:	e015      	b.n	8000396 <HX8357_Init+0x9a>
            } else {
                HX8357_Select(display);
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff ff46 	bl	80001fc <HX8357_Select>
                HX8357_WriteCommand(display, cmd);
 8000370:	7afb      	ldrb	r3, [r7, #11]
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f7ff ff61 	bl	800023c <HX8357_WriteCommand>
                HX8357_WriteData(display, addr, numArgs);
 800037a:	7a7b      	ldrb	r3, [r7, #9]
 800037c:	b29b      	uxth	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	68f9      	ldr	r1, [r7, #12]
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff ff7c 	bl	8000280 <HX8357_WriteData>
                HX8357_Unselect(display);
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ff47 	bl	800021c <HX8357_Unselect>
                addr += numArgs;
 800038e:	7a7b      	ldrb	r3, [r7, #9]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	4413      	add	r3, r2
 8000394:	60fb      	str	r3, [r7, #12]
            }
        }
        if(x & 0x80) {  // If high bit set...
 8000396:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800039a:	2b00      	cmp	r3, #0
 800039c:	da06      	bge.n	80003ac <HX8357_Init+0xb0>
            HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800039e:	7a7a      	ldrb	r2, [r7, #9]
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fcbc 	bl	8000d24 <HAL_Delay>
    while((cmd = *(addr++)) > 0) { // '0' command ends list
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	60fa      	str	r2, [r7, #12]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	72fb      	strb	r3, [r7, #11]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1ba      	bne.n	8000332 <HX8357_Init+0x36>
        }
    }

    // Update display dimensions based on orientation
    if (display->orientation == HX8357_LANDSCAPE) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7c9b      	ldrb	r3, [r3, #18]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d108      	bne.n	80003d6 <HX8357_Init+0xda>
        display->width = HX8357_HEIGHT;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80003ca:	829a      	strh	r2, [r3, #20]
        display->height = HX8357_WIDTH;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80003d2:	82da      	strh	r2, [r3, #22]
 80003d4:	e007      	b.n	80003e6 <HX8357_Init+0xea>
    } else {
        display->width = HX8357_WIDTH;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80003dc:	829a      	strh	r2, [r3, #20]
        display->height = HX8357_HEIGHT;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80003e4:	82da      	strh	r2, [r3, #22]
    }

    return HX8357_OK;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08002d88 	.word	0x08002d88

080003f4 <HX8357_DebugTest>:
    }

    return HX8357_OK;
}

HX8357_Status HX8357_DebugTest(HX8357_HandleTypeDef *display) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    // Test 1: Simple red rectangle
    HX8357_Select(display);
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff fefd 	bl	80001fc <HX8357_Select>

    // Try to fill the whole screen with red
    HX8357_WriteCommand(display, HX8357_CASET);    // Column addr set
 8000402:	212a      	movs	r1, #42	@ 0x2a
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff19 	bl	800023c <HX8357_WriteCommand>
    uint8_t caset_data[] = {0x00, 0x00, 0x01, 0x3F}; // 0 to 319
 800040a:	4b1c      	ldr	r3, [pc, #112]	@ (800047c <HX8357_DebugTest+0x88>)
 800040c:	613b      	str	r3, [r7, #16]
    HX8357_WriteData(display, caset_data, 4);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2204      	movs	r2, #4
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff ff32 	bl	8000280 <HX8357_WriteData>

    HX8357_WriteCommand(display, HX8357_PASET);    // Row addr set
 800041c:	212b      	movs	r1, #43	@ 0x2b
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ff0c 	bl	800023c <HX8357_WriteCommand>
    uint8_t paset_data[] = {0x00, 0x00, 0x01, 0xDF}; // 0 to 479
 8000424:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <HX8357_DebugTest+0x8c>)
 8000426:	60fb      	str	r3, [r7, #12]
    HX8357_WriteData(display, paset_data, 4);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	2204      	movs	r2, #4
 800042e:	4619      	mov	r1, r3
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ff25 	bl	8000280 <HX8357_WriteData>

    HX8357_WriteCommand(display, HX8357_RAMWR);    // Memory write
 8000436:	212c      	movs	r1, #44	@ 0x2c
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f7ff feff 	bl	800023c <HX8357_WriteCommand>

    // Fill with red (0xF800)
    uint8_t red_data[] = {0xF8, 0x00};
 800043e:	23f8      	movs	r3, #248	@ 0xf8
 8000440:	813b      	strh	r3, [r7, #8]
    for(int i = 0; i < 320*480; i++) {
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	e009      	b.n	800045c <HX8357_DebugTest+0x68>
        HX8357_WriteData(display, red_data, 2);
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	2202      	movs	r2, #2
 800044e:	4619      	mov	r1, r3
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff15 	bl	8000280 <HX8357_WriteData>
    for(int i = 0; i < 320*480; i++) {
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	f5b3 3f16 	cmp.w	r3, #153600	@ 0x25800
 8000462:	dbf1      	blt.n	8000448 <HX8357_DebugTest+0x54>
    }

    HX8357_Unselect(display);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff fed9 	bl	800021c <HX8357_Unselect>
    HAL_Delay(1000);  // Wait a second
 800046a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800046e:	f000 fc59 	bl	8000d24 <HAL_Delay>

    return HX8357_OK;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	3f010000 	.word	0x3f010000
 8000480:	df010000 	.word	0xdf010000

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 fbd6 	bl	8000c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f831 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f8b3 	bl	80005fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000496:	f000 f873 	bl	8000580 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  HX8357_HandleTypeDef display = {
 800049a:	463b      	mov	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <main+0x68>)
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <main+0x6c>)
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	2340      	movs	r3, #64	@ 0x40
 80004b4:	813b      	strh	r3, [r7, #8]
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <main+0x6c>)
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004be:	823b      	strh	r3, [r7, #16]
 80004c0:	2301      	movs	r3, #1
 80004c2:	74bb      	strb	r3, [r7, #18]
      .dc_pin = GPIO_PIN_8,
      .orientation = HX8357_LANDSCAPE,
      .use_dma = false  // Disable DMA for debugging
  };

  if (HX8357_Init(&display) != HX8357_OK) {
 80004c4:	463b      	mov	r3, r7
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff18 	bl	80002fc <HX8357_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <main+0x52>
      Error_Handler();
 80004d2:	f000 fadb 	bl	8000a8c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HX8357_DebugTest(&display);
 80004d6:	463b      	mov	r3, r7
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff8b 	bl	80003f4 <HX8357_DebugTest>
      HAL_Delay(1000);
 80004de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e2:	f000 fc1f 	bl	8000d24 <HAL_Delay>
      HX8357_DebugTest(&display);
 80004e6:	bf00      	nop
 80004e8:	e7f5      	b.n	80004d6 <main+0x52>
 80004ea:	bf00      	nop
 80004ec:	2000012c 	.word	0x2000012c
 80004f0:	48000800 	.word	0x48000800

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b096      	sub	sp, #88	@ 0x58
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2244      	movs	r2, #68	@ 0x44
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fbfa 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	463b      	mov	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000516:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800051a:	f000 ff8f 	bl	800143c <HAL_PWREx_ControlVoltageScaling>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000524:	f000 fab2 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000528:	2310      	movs	r3, #16
 800052a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800052c:	2301      	movs	r3, #1
 800052e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000534:	2360      	movs	r3, #96	@ 0x60
 8000536:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000538:	2300      	movs	r3, #0
 800053a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f82f 	bl	80015a4 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800054c:	f000 fa9e 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	230f      	movs	r3, #15
 8000552:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fc35 	bl	8001dd8 <HAL_RCC_ClockConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000574:	f000 fa8a 	bl	8000a8c <Error_Handler>
  }
}
 8000578:	bf00      	nop
 800057a:	3758      	adds	r7, #88	@ 0x58
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <MX_SPI1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	@ (80005f8 <MX_SPI1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800058a:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <MX_SPI1_Init+0x74>)
 800058c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <MX_SPI1_Init+0x74>)
 800059a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800059e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005b6:	2210      	movs	r2, #16
 80005b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005ce:	2207      	movs	r2, #7
 80005d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005da:	2208      	movs	r2, #8
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_SPI1_Init+0x74>)
 80005e0:	f001 fe80 	bl	80022e4 <HAL_SPI_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 fa4f 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000012c 	.word	0x2000012c
 80005f8:	40013000 	.word	0x40013000

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	@ 0x38
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000612:	4bb2      	ldr	r3, [pc, #712]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4ab1      	ldr	r2, [pc, #708]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4baf      	ldr	r3, [pc, #700]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	623b      	str	r3, [r7, #32]
 8000628:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4bac      	ldr	r3, [pc, #688]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4aab      	ldr	r2, [pc, #684]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4ba9      	ldr	r3, [pc, #676]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4ba6      	ldr	r3, [pc, #664]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4aa5      	ldr	r2, [pc, #660]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4ba3      	ldr	r3, [pc, #652]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0320 	and.w	r3, r3, #32
 8000656:	61bb      	str	r3, [r7, #24]
 8000658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4ba0      	ldr	r3, [pc, #640]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a9f      	ldr	r2, [pc, #636]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b9d      	ldr	r3, [pc, #628]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b9a      	ldr	r3, [pc, #616]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a99      	ldr	r2, [pc, #612]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b97      	ldr	r3, [pc, #604]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b94      	ldr	r3, [pc, #592]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a93      	ldr	r2, [pc, #588]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b91      	ldr	r3, [pc, #580]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a2:	4b8e      	ldr	r3, [pc, #568]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a8d      	ldr	r2, [pc, #564]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b8b      	ldr	r3, [pc, #556]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ba:	4b88      	ldr	r3, [pc, #544]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a87      	ldr	r2, [pc, #540]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b85      	ldr	r3, [pc, #532]	@ (80008dc <MX_GPIO_Init+0x2e0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006d2:	f000 ff57 	bl	8001584 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80006dc:	4880      	ldr	r0, [pc, #512]	@ (80008e0 <MX_GPIO_Init+0x2e4>)
 80006de:	f000 fe75 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006e2:	230c      	movs	r3, #12
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80006f2:	230d      	movs	r3, #13
 80006f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4879      	ldr	r0, [pc, #484]	@ (80008e4 <MX_GPIO_Init+0x2e8>)
 80006fe:	f000 fcd3 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000702:	2307      	movs	r3, #7
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000712:	2304      	movs	r3, #4
 8000714:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4872      	ldr	r0, [pc, #456]	@ (80008e8 <MX_GPIO_Init+0x2ec>)
 800071e:	f000 fcc3 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000732:	230d      	movs	r3, #13
 8000734:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073a:	4619      	mov	r1, r3
 800073c:	486a      	ldr	r0, [pc, #424]	@ (80008e8 <MX_GPIO_Init+0x2ec>)
 800073e:	f000 fcb3 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000742:	233f      	movs	r3, #63	@ 0x3f
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000746:	230b      	movs	r3, #11
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	4619      	mov	r1, r3
 8000754:	4865      	ldr	r0, [pc, #404]	@ (80008ec <MX_GPIO_Init+0x2f0>)
 8000756:	f000 fca7 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075a:	2301      	movs	r3, #1
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800076a:	2301      	movs	r3, #1
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f000 fc96 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800077c:	230a      	movs	r3, #10
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000780:	230b      	movs	r3, #11
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fc89 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000796:	2301      	movs	r3, #1
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	484f      	ldr	r0, [pc, #316]	@ (80008f0 <MX_GPIO_Init+0x2f4>)
 80007b2:	f000 fc79 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b6:	2302      	movs	r3, #2
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007ba:	230b      	movs	r3, #11
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	4619      	mov	r1, r3
 80007c8:	4849      	ldr	r0, [pc, #292]	@ (80008f0 <MX_GPIO_Init+0x2f4>)
 80007ca:	f000 fc6d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80007ce:	2344      	movs	r3, #68	@ 0x44
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	4843      	ldr	r0, [pc, #268]	@ (80008f0 <MX_GPIO_Init+0x2f4>)
 80007e2:	f000 fc61 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80007e6:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000800:	4619      	mov	r1, r3
 8000802:	4838      	ldr	r0, [pc, #224]	@ (80008e4 <MX_GPIO_Init+0x2e8>)
 8000804:	f000 fc50 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000808:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800081a:	2303      	movs	r3, #3
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	482f      	ldr	r0, [pc, #188]	@ (80008e4 <MX_GPIO_Init+0x2e8>)
 8000826:	f000 fc3f 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800082a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800083c:	2301      	movs	r3, #1
 800083e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	482a      	ldr	r0, [pc, #168]	@ (80008f0 <MX_GPIO_Init+0x2f4>)
 8000848:	f000 fc2e 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800084c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800085e:	230d      	movs	r3, #13
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	4619      	mov	r1, r3
 8000868:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <MX_GPIO_Init+0x2f4>)
 800086a:	f000 fc1d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800086e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000880:	230e      	movs	r3, #14
 8000882:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <MX_GPIO_Init+0x2f4>)
 800088c:	f000 fc0c 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000890:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008a2:	2307      	movs	r3, #7
 80008a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_GPIO_Init+0x2e4>)
 80008ae:	f000 fbfb 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_GPIO_Init+0x2e4>)
 80008cc:	f000 fbec 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008da:	e00b      	b.n	80008f4 <MX_GPIO_Init+0x2f8>
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000c00 	.word	0x48000c00
 80008e4:	48001000 	.word	0x48001000
 80008e8:	48001400 	.word	0x48001400
 80008ec:	48000800 	.word	0x48000800
 80008f0:	48000400 	.word	0x48000400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008fc:	2308      	movs	r3, #8
 80008fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	485c      	ldr	r0, [pc, #368]	@ (8000a78 <MX_GPIO_Init+0x47c>)
 8000908:	f000 fbce 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800091c:	230d      	movs	r3, #13
 800091e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4855      	ldr	r0, [pc, #340]	@ (8000a7c <MX_GPIO_Init+0x480>)
 8000928:	f000 fbbe 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800093c:	2302      	movs	r3, #2
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	484d      	ldr	r0, [pc, #308]	@ (8000a7c <MX_GPIO_Init+0x480>)
 8000948:	f000 fbae 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800094c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800095e:	230c      	movs	r3, #12
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4844      	ldr	r0, [pc, #272]	@ (8000a7c <MX_GPIO_Init+0x480>)
 800096a:	f000 fb9d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800096e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000980:	230a      	movs	r3, #10
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098e:	f000 fb8b 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009aa:	f000 fb7d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009be:	2309      	movs	r3, #9
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	482d      	ldr	r0, [pc, #180]	@ (8000a80 <MX_GPIO_Init+0x484>)
 80009ca:	f000 fb6d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ce:	2304      	movs	r3, #4
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009de:	230c      	movs	r3, #12
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	4825      	ldr	r0, [pc, #148]	@ (8000a80 <MX_GPIO_Init+0x484>)
 80009ea:	f000 fb5d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80009ee:	2378      	movs	r3, #120	@ 0x78
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fe:	2307      	movs	r3, #7
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	481d      	ldr	r0, [pc, #116]	@ (8000a80 <MX_GPIO_Init+0x484>)
 8000a0a:	f000 fb4d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a0e:	2338      	movs	r3, #56	@ 0x38
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4816      	ldr	r0, [pc, #88]	@ (8000a84 <MX_GPIO_Init+0x488>)
 8000a2a:	f000 fb3d 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <MX_GPIO_Init+0x488>)
 8000a4c:	f000 fb2c 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a50:	2301      	movs	r3, #1
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_GPIO_Init+0x48c>)
 8000a6c:	f000 fb1c 	bl	80010a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3738      	adds	r7, #56	@ 0x38
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	48001800 	.word	0x48001800
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000c00 	.word	0x48000c00
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48001000 	.word	0x48001000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <HAL_SPI_MspInit+0x7c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d128      	bne.n	8000b54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_SPI_MspInit+0x80>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b06:	4a16      	ldr	r2, [pc, #88]	@ (8000b60 <HAL_SPI_MspInit+0x80>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_SPI_MspInit+0x80>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_SPI_MspInit+0x80>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <HAL_SPI_MspInit+0x80>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_SPI_MspInit+0x80>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b32:	23f0      	movs	r3, #240	@ 0xf0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b42:	2305      	movs	r3, #5
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f000 faaa 	bl	80010a8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	@ 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40013000 	.word	0x40013000
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 f893 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f002 f879 	bl	8002d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fc33 	bl	8000484 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c2c:	08002e38 	.word	0x08002e38
  ldr r2, =_sbss
 8000c30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c34:	20000194 	.word	0x20000194

08000c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_IRQHandler>

08000c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f943 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f80e 	bl	8000c6c <HAL_InitTick>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e001      	b.n	8000c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5c:	f7ff ff1c 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c78:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <HAL_InitTick+0x6c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d023      	beq.n	8000cc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_InitTick+0x70>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <HAL_InitTick+0x6c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f941 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10f      	bne.n	8000cc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d809      	bhi.n	8000cbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f919 	bl	8000ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_InitTick+0x74>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e007      	b.n	8000ccc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e004      	b.n	8000ccc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e001      	b.n	8000ccc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000190 	.word	0x20000190

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000190 	.word	0x20000190

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	@ (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff47 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff5c 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb0 	bl	8000e8c <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_DMA_Start_IT+0x20>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e066      	b.n	8001024 <HAL_DMA_Start_IT+0xee>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d155      	bne.n	8001016 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0201 	bic.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 f84c 	bl	800102c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 020e 	orr.w	r2, r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e00f      	b.n	8000fce <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0204 	bic.w	r2, r2, #4
 8000fbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 020a 	orr.w	r2, r2, #10
 8000fcc:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001002:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e005      	b.n	8001022 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800101e:	2302      	movs	r3, #2
 8001020:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001042:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001054:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f003 021c 	and.w	r2, r3, #28
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d108      	bne.n	800108c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800108a:	e007      	b.n	800109c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e166      	b.n	8001386 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8158 	beq.w	8001380 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d005      	beq.n	80010e8 <HAL_GPIO_Init+0x40>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111e:	2201      	movs	r2, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b03      	cmp	r3, #3
 8001154:	d017      	beq.n	8001186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d123      	bne.n	80011da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0203 	and.w	r2, r3, #3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80b2 	beq.w	8001380 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b61      	ldr	r3, [pc, #388]	@ (80013a4 <HAL_GPIO_Init+0x2fc>)
 800121e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001220:	4a60      	ldr	r2, [pc, #384]	@ (80013a4 <HAL_GPIO_Init+0x2fc>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6613      	str	r3, [r2, #96]	@ 0x60
 8001228:	4b5e      	ldr	r3, [pc, #376]	@ (80013a4 <HAL_GPIO_Init+0x2fc>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001234:	4a5c      	ldr	r2, [pc, #368]	@ (80013a8 <HAL_GPIO_Init+0x300>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800125e:	d02b      	beq.n	80012b8 <HAL_GPIO_Init+0x210>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <HAL_GPIO_Init+0x304>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d025      	beq.n	80012b4 <HAL_GPIO_Init+0x20c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a51      	ldr	r2, [pc, #324]	@ (80013b0 <HAL_GPIO_Init+0x308>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d01f      	beq.n	80012b0 <HAL_GPIO_Init+0x208>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a50      	ldr	r2, [pc, #320]	@ (80013b4 <HAL_GPIO_Init+0x30c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d019      	beq.n	80012ac <HAL_GPIO_Init+0x204>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a4f      	ldr	r2, [pc, #316]	@ (80013b8 <HAL_GPIO_Init+0x310>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d013      	beq.n	80012a8 <HAL_GPIO_Init+0x200>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a4e      	ldr	r2, [pc, #312]	@ (80013bc <HAL_GPIO_Init+0x314>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_GPIO_Init+0x1fc>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a4d      	ldr	r2, [pc, #308]	@ (80013c0 <HAL_GPIO_Init+0x318>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x1f8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <HAL_GPIO_Init+0x31c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_GPIO_Init+0x1f4>
 8001298:	2307      	movs	r3, #7
 800129a:	e00e      	b.n	80012ba <HAL_GPIO_Init+0x212>
 800129c:	2308      	movs	r3, #8
 800129e:	e00c      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012a0:	2306      	movs	r3, #6
 80012a2:	e00a      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012a4:	2305      	movs	r3, #5
 80012a6:	e008      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012a8:	2304      	movs	r3, #4
 80012aa:	e006      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012ac:	2303      	movs	r3, #3
 80012ae:	e004      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_GPIO_Init+0x212>
 80012b8:	2300      	movs	r3, #0
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	f002 0203 	and.w	r2, r2, #3
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	4093      	lsls	r3, r2
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ca:	4937      	ldr	r1, [pc, #220]	@ (80013a8 <HAL_GPIO_Init+0x300>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d8:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012fc:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001326:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001350:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <HAL_GPIO_Init+0x320>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	f47f ae91 	bne.w	80010b8 <HAL_GPIO_Init+0x10>
  }
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48000800 	.word	0x48000800
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	48001000 	.word	0x48001000
 80013bc:	48001400 	.word	0x48001400
 80013c0:	48001800 	.word	0x48001800
 80013c4:	48001c00 	.word	0x48001c00
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140c:	d102      	bne.n	8001414 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800140e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001412:	e00b      	b.n	800142c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001422:	d102      	bne.n	800142a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001428:	e000      	b.n	800142c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800142a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d141      	bne.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800144a:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001456:	d131      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001458:	4b47      	ldr	r3, [pc, #284]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145e:	4a46      	ldr	r2, [pc, #280]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001468:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001470:	4a41      	ldr	r2, [pc, #260]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001476:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001478:	4b40      	ldr	r3, [pc, #256]	@ (800157c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2232      	movs	r2, #50	@ 0x32
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a3f      	ldr	r2, [pc, #252]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	0c9b      	lsrs	r3, r3, #18
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148e:	e002      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3b01      	subs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001496:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a2:	d102      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f2      	bne.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014aa:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b6:	d158      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e057      	b.n	800156c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014cc:	e04d      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d4:	d141      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e2:	d131      	bne.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ea:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2232      	movs	r2, #50	@ 0x32
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	0c9b      	lsrs	r3, r3, #18
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	e002      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152e:	d102      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f2      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001542:	d112      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e011      	b.n	800156c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001558:	e007      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001568:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40007000 	.word	0x40007000
 800157c:	20000000 	.word	0x20000000
 8001580:	431bde83 	.word	0x431bde83

08001584 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001592:	6053      	str	r3, [r2, #4]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40007000 	.word	0x40007000

080015a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 bc08 	b.w	8001dc8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4b96      	ldr	r3, [pc, #600]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	4b94      	ldr	r3, [pc, #592]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80e4 	beq.w	80017a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	f040 808b 	bne.w	80016fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f040 8087 	bne.w	80016fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f0:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x64>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e3df      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4b81      	ldr	r3, [pc, #516]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_RCC_OscConfig+0x7e>
 8001618:	4b7e      	ldr	r3, [pc, #504]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001620:	e005      	b.n	800162e <HAL_RCC_OscConfig+0x8a>
 8001622:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800162e:	4293      	cmp	r3, r2
 8001630:	d223      	bcs.n	800167a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd94 	bl	8002164 <RCC_SetFlashLatencyFromMSIRange>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e3c0      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001646:	4b73      	ldr	r3, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a72      	ldr	r2, [pc, #456]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	496d      	ldr	r1, [pc, #436]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001664:	4b6b      	ldr	r3, [pc, #428]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	4968      	ldr	r1, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e025      	b.n	80016c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167a:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4960      	ldr	r1, [pc, #384]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001698:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	495b      	ldr	r1, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd54 	bl	8002164 <RCC_SetFlashLatencyFromMSIRange>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e380      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c6:	f000 fcc1 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b51      	ldr	r3, [pc, #324]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	4950      	ldr	r1, [pc, #320]	@ (8001818 <HAL_RCC_OscConfig+0x274>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a4e      	ldr	r2, [pc, #312]	@ (800181c <HAL_RCC_OscConfig+0x278>)
 80016e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fabe 	bl	8000c6c <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d052      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e364      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d032      	beq.n	800176c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001706:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a42      	ldr	r2, [pc, #264]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001712:	f7ff fafb 	bl	8000d0c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff faf7 	bl	8000d0c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e34d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172c:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001738:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a35      	ldr	r2, [pc, #212]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4930      	ldr	r1, [pc, #192]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001756:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	492b      	ldr	r1, [pc, #172]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
 800176a:	e01a      	b.n	80017a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800176c:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a28      	ldr	r2, [pc, #160]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001778:	f7ff fac8 	bl	8000d0c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001780:	f7ff fac4 	bl	8000d0c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e31a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1dc>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d073      	beq.n	8001896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x21c>
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d10b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d063      	beq.n	8001894 <HAL_RCC_OscConfig+0x2f0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d15f      	bne.n	8001894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2f7      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0x24c>
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e025      	b.n	800183c <HAL_RCC_OscConfig+0x298>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f8:	d114      	bne.n	8001824 <HAL_RCC_OscConfig+0x280>
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a02      	ldr	r2, [pc, #8]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0x298>
 8001814:	40021000 	.word	0x40021000
 8001818:	08002df0 	.word	0x08002df0
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004
 8001824:	4ba0      	ldr	r3, [pc, #640]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a9f      	ldr	r2, [pc, #636]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b9d      	ldr	r3, [pc, #628]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9c      	ldr	r2, [pc, #624]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fa62 	bl	8000d0c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fa5e 	bl	8000d0c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e2b4      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	4b92      	ldr	r3, [pc, #584]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x2a8>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fa4e 	bl	8000d0c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fa4a 	bl	8000d0c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e2a0      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	4b88      	ldr	r3, [pc, #544]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x2d0>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d060      	beq.n	8001964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x310>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d119      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b4:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x328>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e27d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b76      	ldr	r3, [pc, #472]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	4973      	ldr	r1, [pc, #460]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	e040      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d023      	beq.n	8001932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fa09 	bl	8000d0c <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff fa05 	bl	8000d0c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e25b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b65      	ldr	r3, [pc, #404]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b62      	ldr	r3, [pc, #392]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	495f      	ldr	r1, [pc, #380]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e018      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff f9e5 	bl	8000d0c <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff f9e1 	bl	8000d0c <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e237      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03c      	beq.n	80019ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197e:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f9c0 	bl	8000d0c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff f9bc 	bl	8000d0c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e212      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	4b41      	ldr	r3, [pc, #260]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ef      	beq.n	8001990 <HAL_RCC_OscConfig+0x3ec>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b8:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff f9a3 	bl	8000d0c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff f99f 	bl	8000d0c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1f5      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	4b32      	ldr	r3, [pc, #200]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80a6 	beq.w	8001b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0c:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d118      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f966 	bl	8000d0c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7ff f962 	bl	8000d0c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1b8      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d8>
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7a:	e029      	b.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d115      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x50c>
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8a:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a94:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9a:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac0:	4b99      	ldr	r3, [pc, #612]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac6:	4a98      	ldr	r2, [pc, #608]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f918 	bl	8000d0c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f914 	bl	8000d0c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e168      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	4b8c      	ldr	r3, [pc, #560]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ed      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x53c>
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff f901 	bl	8000d0c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff f8fd 	bl	8000d0c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e151      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	4b80      	ldr	r3, [pc, #512]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ed      	bne.n	8001b0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b7b      	ldr	r3, [pc, #492]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03c      	beq.n	8001bca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b58:	4b73      	ldr	r3, [pc, #460]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b5e:	4a72      	ldr	r2, [pc, #456]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f8d0 	bl	8000d0c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b70:	f7ff f8cc 	bl	8000d0c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e122      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b82:	4b69      	ldr	r3, [pc, #420]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ef      	beq.n	8001b70 <HAL_RCC_OscConfig+0x5cc>
 8001b90:	e01b      	b.n	8001bca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b92:	4b65      	ldr	r3, [pc, #404]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b98:	4a63      	ldr	r2, [pc, #396]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f8b3 	bl	8000d0c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7ff f8af 	bl	8000d0c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e105      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80f9 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 80cf 	bne.w	8001d7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bde:	4b52      	ldr	r3, [pc, #328]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0203 	and.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d12c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d123      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d11b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d113      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	3b01      	subs	r3, #1
 8001c32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	3b01      	subs	r3, #1
 8001c46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d071      	beq.n	8001d30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d068      	beq.n	8001d24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c52:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c5e:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0ac      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7a:	f7ff f847 	bl	8000d0c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff f843 	bl	8000d0c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e099      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_RCC_OscConfig+0x788>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cba:	0212      	lsls	r2, r2, #8
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0552      	lsls	r2, r2, #21
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0652      	lsls	r2, r2, #25
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	4912      	ldr	r1, [pc, #72]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfc:	f7ff f806 	bl	8000d0c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f802 	bl	8000d0c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d22:	e050      	b.n	8001dc6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d144      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d54:	f7fe ffda 	bl	8000d0c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe ffd6 	bl	8000d0c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e02c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x7b8>
 8001d7a:	e024      	b.n	8001dc6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d01f      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7fe ffbd 	bl	8000d0c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe ffb9 	bl	8000d0c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4905      	ldr	r1, [pc, #20]	@ (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_OscConfig+0x830>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
 8001dc0:	e001      	b.n	8001dc6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	feeefffc 	.word	0xfeeefffc

08001dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e11d      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b90      	ldr	r3, [pc, #576]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 020f 	bic.w	r2, r3, #15
 8001e06:	498b      	ldr	r1, [pc, #556]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b89      	ldr	r3, [pc, #548]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e105      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b81      	ldr	r3, [pc, #516]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	497b      	ldr	r1, [pc, #492]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d079      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d11e      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b75      	ldr	r3, [pc, #468]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0dc      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e72:	f000 f9d1 	bl	8002218 <RCC_GetSysClockFreqFromPLLSource>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a70      	ldr	r2, [pc, #448]	@ (800203c <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d946      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d140      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e035      	b.n	8001f0c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea8:	4b63      	ldr	r3, [pc, #396]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d115      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b9      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec0:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0ad      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0a5      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ee0:	f000 f8b4 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a55      	ldr	r2, [pc, #340]	@ (800203c <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d90f      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001eec:	4b52      	ldr	r3, [pc, #328]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 0203 	bic.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4947      	ldr	r1, [pc, #284]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1e:	f7fe fef5 	bl	8000d0c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7fe fef1 	bl	8000d0c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e077      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 020c 	and.w	r2, r3, #12
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d1eb      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b80      	cmp	r3, #128	@ 0x80
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f54:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a37      	ldr	r2, [pc, #220]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f5e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d208      	bcs.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	492b      	ldr	r1, [pc, #172]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d210      	bcs.n	8001fbe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 020f 	bic.w	r2, r3, #15
 8001fa4:	4923      	ldr	r1, [pc, #140]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e036      	b.n	800202c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fca:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4918      	ldr	r1, [pc, #96]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe8:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4910      	ldr	r1, [pc, #64]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffc:	f000 f826 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_RCC_ClockConfig+0x260>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	490c      	ldr	r1, [pc, #48]	@ (8002040 <HAL_RCC_ClockConfig+0x268>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_RCC_ClockConfig+0x26c>)
 800201a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_RCC_ClockConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fe23 	bl	8000c6c <HAL_InitTick>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]

  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40022000 	.word	0x40022000
 8002038:	40021000 	.word	0x40021000
 800203c:	04c4b400 	.word	0x04c4b400
 8002040:	08002df0 	.word	0x08002df0
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205a:	4b3e      	ldr	r3, [pc, #248]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d121      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d11e      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002080:	4b34      	ldr	r3, [pc, #208]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800208c:	4b31      	ldr	r3, [pc, #196]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	e005      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d102      	bne.n	80020ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020c4:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_RCC_GetSysClockFreq+0x110>)
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	e004      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020d0:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x114>)
 80020d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d134      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020da:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d003      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0xac>
 80020f0:	e005      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_RCC_GetSysClockFreq+0x110>)
 80020f4:	617b      	str	r3, [r7, #20]
      break;
 80020f6:	e005      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x114>)
 80020fa:	617b      	str	r3, [r7, #20]
      break;
 80020fc:	e002      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	617b      	str	r3, [r7, #20]
      break;
 8002102:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3301      	adds	r3, #1
 8002110:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	fb03 f202 	mul.w	r2, r3, r2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	0e5b      	lsrs	r3, r3, #25
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	3301      	adds	r3, #1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002144:	69bb      	ldr	r3, [r7, #24]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	08002e00 	.word	0x08002e00
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200

08002164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002170:	4b27      	ldr	r3, [pc, #156]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800217c:	f7ff f93e 	bl	80013fc <HAL_PWREx_GetVoltageRange>
 8002180:	6178      	str	r0, [r7, #20]
 8002182:	e014      	b.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002190:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800219c:	f7ff f92e 	bl	80013fc <HAL_PWREx_GetVoltageRange>
 80021a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b4:	d10b      	bne.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b80      	cmp	r3, #128	@ 0x80
 80021ba:	d913      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2ba0      	cmp	r3, #160	@ 0xa0
 80021c0:	d902      	bls.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c2:	2302      	movs	r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	e00d      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c8:	2301      	movs	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e00a      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80021d2:	d902      	bls.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80021d4:	2302      	movs	r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e004      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b70      	cmp	r3, #112	@ 0x70
 80021de:	d101      	bne.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e0:	2301      	movs	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 020f 	bic.w	r2, r3, #15
 80021ec:	4909      	ldr	r1, [pc, #36]	@ (8002214 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021f4:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	40022000 	.word	0x40022000

08002218 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221e:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d00b      	beq.n	8002246 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d825      	bhi.n	8002280 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d008      	beq.n	800224c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d11f      	bne.n	8002280 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002242:	613b      	str	r3, [r7, #16]
    break;
 8002244:	e01f      	b.n	8002286 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002248:	613b      	str	r3, [r7, #16]
    break;
 800224a:	e01c      	b.n	8002286 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800224c:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002258:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e005      	b.n	8002274 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002268:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002274:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	613b      	str	r3, [r7, #16]
    break;
 800227e:	e002      	b.n	8002286 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
    break;
 8002284:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002286:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	3301      	adds	r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	fb03 f202 	mul.w	r2, r3, r2
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ac:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0e5b      	lsrs	r3, r3, #25
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80022c6:	683b      	ldr	r3, [r7, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40021000 	.word	0x40021000
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	08002e00 	.word	0x08002e00

080022e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e095      	b.n	8002422 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002306:	d009      	beq.n	800231c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
 800230e:	e005      	b.n	800231c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe fbd2 	bl	8000ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002352:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800235c:	d902      	bls.n	8002364 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e002      	b.n	800236a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002368:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002372:	d007      	beq.n	8002384 <HAL_SPI_Init+0xa0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800237c:	d002      	beq.n	8002384 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c6:	ea42 0103 	orr.w	r1, r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	f003 0204 	and.w	r2, r3, #4
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002400:	ea42 0103 	orr.w	r1, r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b088      	sub	sp, #32
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243a:	f7fe fc67 	bl	8000d0c <HAL_GetTick>
 800243e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
 8002452:	e15c      	b.n	800270e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_SPI_Transmit+0x36>
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e154      	b.n	800270e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_SPI_Transmit+0x48>
 800246e:	2302      	movs	r3, #2
 8002470:	e14d      	b.n	800270e <HAL_SPI_Transmit+0x2e4>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024c4:	d10f      	bne.n	80024e6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d007      	beq.n	8002504 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800250c:	d952      	bls.n	80025b4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_SPI_Transmit+0xf2>
 8002516:	8b7b      	ldrh	r3, [r7, #26]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d145      	bne.n	80025a8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002540:	e032      	b.n	80025a8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d112      	bne.n	8002576 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	1c9a      	adds	r2, r3, #2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002574:	e018      	b.n	80025a8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002576:	f7fe fbc9 	bl	8000d0c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d803      	bhi.n	800258e <HAL_SPI_Transmit+0x164>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Transmit+0x16a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0b2      	b.n	800270e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1c7      	bne.n	8002542 <HAL_SPI_Transmit+0x118>
 80025b2:	e083      	b.n	80026bc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit+0x198>
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d177      	bne.n	80026b2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d912      	bls.n	80025f2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025dc:	1c9a      	adds	r2, r3, #2
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b02      	subs	r3, #2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025f0:	e05f      	b.n	80026b2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002618:	e04b      	b.n	80026b2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d12b      	bne.n	8002680 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d912      	bls.n	8002658 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	1c9a      	adds	r2, r3, #2
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b02      	subs	r3, #2
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002656:	e02c      	b.n	80026b2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800267e:	e018      	b.n	80026b2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002680:	f7fe fb44 	bl	8000d0c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d803      	bhi.n	8002698 <HAL_SPI_Transmit+0x26e>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002696:	d102      	bne.n	800269e <HAL_SPI_Transmit+0x274>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e02d      	b.n	800270e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ae      	bne.n	800261a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fad5 	bl	8002c70 <SPI_EndRxTxTransaction>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800270c:	2300      	movs	r3, #0
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e0d4      	b.n	80028e0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_SPI_Transmit_DMA+0x2a>
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0cc      	b.n	80028e0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_SPI_Transmit_DMA+0x3c>
 8002750:	2302      	movs	r3, #2
 8002752:	e0c5      	b.n	80028e0 <HAL_SPI_Transmit_DMA+0x1c8>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2203      	movs	r2, #3
 8002760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a6:	d10f      	bne.n	80027c8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	4a46      	ldr	r2, [pc, #280]	@ (80028e8 <HAL_SPI_Transmit_DMA+0x1d0>)
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d4:	4a45      	ldr	r2, [pc, #276]	@ (80028ec <HAL_SPI_Transmit_DMA+0x1d4>)
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	4a44      	ldr	r2, [pc, #272]	@ (80028f0 <HAL_SPI_Transmit_DMA+0x1d8>)
 80027de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	2200      	movs	r2, #0
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027f6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002800:	d82d      	bhi.n	800285e <HAL_SPI_Transmit_DMA+0x146>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280c:	d127      	bne.n	800285e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10f      	bne.n	800283c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800282a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800283a:	e010      	b.n	800285e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800284a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002866:	4619      	mov	r1, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002874:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002876:	f7fe fb5e 	bl	8000f36 <HAL_DMA_Start_IT>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	f043 0210 	orr.w	r2, r3, #16
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e023      	b.n	80028e0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a2:	2b40      	cmp	r3, #64	@ 0x40
 80028a4:	d007      	beq.n	80028b6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0202 	orr.w	r2, r2, #2
 80028dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	080029d7 	.word	0x080029d7
 80028ec:	08002931 	.word	0x08002931
 80028f0:	080029f3 	.word	0x080029f3

080028f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293e:	f7fe f9e5 	bl	8000d0c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d03b      	beq.n	80029ca <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0220 	bic.w	r2, r2, #32
 8002960:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0202 	bic.w	r2, r2, #2
 8002970:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	2164      	movs	r1, #100	@ 0x64
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f000 f97a 	bl	8002c70 <SPI_EndRxTxTransaction>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ffaa 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029c8:	e002      	b.n	80029d0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff92 	bl	80028f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff ff8f 	bl	8002908 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0203 	bic.w	r2, r2, #3
 8002a0e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	f043 0210 	orr.w	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff ff79 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a44:	f7fe f962 	bl	8000d0c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a54:	f7fe f95a 	bl	8000d0c <HAL_GetTick>
 8002a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	@ (8002b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	015b      	lsls	r3, r3, #5
 8002a60:	0d1b      	lsrs	r3, r3, #20
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6a:	e054      	b.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d050      	beq.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a74:	f7fe f94a 	bl	8000d0c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d902      	bls.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d13d      	bne.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aa2:	d111      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aac:	d004      	beq.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab6:	d107      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad0:	d10f      	bne.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e017      	b.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d19b      	bne.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000

08002b44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	@ 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b56:	f7fe f8d9 	bl	8000d0c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002b66:	f7fe f8d1 	bl	8000d0c <HAL_GetTick>
 8002b6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b74:	4b3d      	ldr	r3, [pc, #244]	@ (8002c6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00da      	lsls	r2, r3, #3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	0d1b      	lsrs	r3, r3, #20
 8002b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b8c:	e060      	b.n	8002c50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b94:	d107      	bne.n	8002ba6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d050      	beq.n	8002c50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bae:	f7fe f8ad 	bl	8000d0c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d902      	bls.n	8002bc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d13d      	bne.n	8002c40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bdc:	d111      	bne.n	8002c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be6:	d004      	beq.n	8002bf2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf0:	d107      	bne.n	8002c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c0a:	d10f      	bne.n	8002c2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e010      	b.n	8002c62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d196      	bne.n	8002b8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3728      	adds	r7, #40	@ 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff ff5b 	bl	8002b44 <SPI_WaitFifoStateUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e027      	b.n	8002cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fec0 	bl	8002a34 <SPI_WaitFlagStateUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e014      	b.n	8002cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff34 	bl	8002b44 <SPI_WaitFifoStateUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e000      	b.n	8002cf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <memset>:
 8002cfc:	4402      	add	r2, r0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <__libc_init_array>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d44 <__libc_init_array+0x38>)
 8002d10:	4c0d      	ldr	r4, [pc, #52]	@ (8002d48 <__libc_init_array+0x3c>)
 8002d12:	1b64      	subs	r4, r4, r5
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	2600      	movs	r6, #0
 8002d18:	42a6      	cmp	r6, r4
 8002d1a:	d109      	bne.n	8002d30 <__libc_init_array+0x24>
 8002d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d4c <__libc_init_array+0x40>)
 8002d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8002d50 <__libc_init_array+0x44>)
 8002d20:	f000 f826 	bl	8002d70 <_init>
 8002d24:	1b64      	subs	r4, r4, r5
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	2600      	movs	r6, #0
 8002d2a:	42a6      	cmp	r6, r4
 8002d2c:	d105      	bne.n	8002d3a <__libc_init_array+0x2e>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d34:	4798      	blx	r3
 8002d36:	3601      	adds	r6, #1
 8002d38:	e7ee      	b.n	8002d18 <__libc_init_array+0xc>
 8002d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3e:	4798      	blx	r3
 8002d40:	3601      	adds	r6, #1
 8002d42:	e7f2      	b.n	8002d2a <__libc_init_array+0x1e>
 8002d44:	08002e30 	.word	0x08002e30
 8002d48:	08002e30 	.word	0x08002e30
 8002d4c:	08002e30 	.word	0x08002e30
 8002d50:	08002e34 	.word	0x08002e34

08002d54 <memcpy>:
 8002d54:	440a      	add	r2, r1
 8002d56:	4291      	cmp	r1, r2
 8002d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d5c:	d100      	bne.n	8002d60 <memcpy+0xc>
 8002d5e:	4770      	bx	lr
 8002d60:	b510      	push	{r4, lr}
 8002d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d6a:	4291      	cmp	r1, r2
 8002d6c:	d1f9      	bne.n	8002d62 <memcpy+0xe>
 8002d6e:	bd10      	pop	{r4, pc}

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
