
drawbot_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026d4  080026d4  000036d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002714  08002714  00004020  2**0
                  CONTENTS
  4 .ARM          00000000  08002714  08002714  00004020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002714  08002714  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002714  08002714  00003714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002718  08002718  00003718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800271c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000020  0800273c  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800273c  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000778e  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001610  00000000  00000000  0000b7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0000cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f3  00000000  00000000  0000d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f5d  00000000  00000000  0000dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b3c  00000000  00000000  00035b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4d0f  00000000  00000000  0003e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013338b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f18  00000000  00000000  001333d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001352e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000020 	.word	0x20000020
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080026bc 	.word	0x080026bc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000024 	.word	0x20000024
 80001f8:	080026bc 	.word	0x080026bc

080001fc <HX8357_Select>:
 *      Author: madhavss
 */

#include "hx8357_stm32.h"

static void HX8357_Select(HX8357_HandleTypeDef *display) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->cs_port, display->cs_pin, GPIO_PIN_RESET);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6858      	ldr	r0, [r3, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	891b      	ldrh	r3, [r3, #8]
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	f000 ff1e 	bl	8001050 <HAL_GPIO_WritePin>
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <HX8357_Unselect>:

static void HX8357_Unselect(HX8357_HandleTypeDef *display) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->cs_port, display->cs_pin, GPIO_PIN_SET);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6858      	ldr	r0, [r3, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	891b      	ldrh	r3, [r3, #8]
 800022c:	2201      	movs	r2, #1
 800022e:	4619      	mov	r1, r3
 8000230:	f000 ff0e 	bl	8001050 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <HX8357_SetCommand>:

static void HX8357_SetCommand(HX8357_HandleTypeDef *display) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->dc_port, display->dc_pin, GPIO_PIN_RESET);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	68d8      	ldr	r0, [r3, #12]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	8a1b      	ldrh	r3, [r3, #16]
 800024c:	2200      	movs	r2, #0
 800024e:	4619      	mov	r1, r3
 8000250:	f000 fefe 	bl	8001050 <HAL_GPIO_WritePin>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <HX8357_WriteCommand>:

static void HX8357_SetData(HX8357_HandleTypeDef *display) {
    HAL_GPIO_WritePin(display->dc_port, display->dc_pin, GPIO_PIN_SET);
}

void HX8357_WriteCommand(HX8357_HandleTypeDef *display, uint8_t cmd) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]
    HX8357_SetCommand(display);
 8000268:	6878      	ldr	r0, [r7, #4]
 800026a:	f7ff ffe7 	bl	800023c <HX8357_SetCommand>
    HX8357_Select(display);
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f7ff ffc4 	bl	80001fc <HX8357_Select>
    HAL_SPI_Transmit(display->hspi, &cmd, 1, HAL_MAX_DELAY);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	1cf9      	adds	r1, r7, #3
 800027a:	f04f 33ff 	mov.w	r3, #4294967295
 800027e:	2201      	movs	r2, #1
 8000280:	f001 ff15 	bl	80020ae <HAL_SPI_Transmit>
    HX8357_Unselect(display);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ffc9 	bl	800021c <HX8357_Unselect>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <HX8357_Init>:
    HX8357_Select(display);
    HAL_SPI_Transmit(display->hspi, &data, 1, HAL_MAX_DELAY);
    HX8357_Unselect(display);
}

void HX8357_Init(HX8357_HandleTypeDef *display) {
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
    // Hardware reset sequence
    HAL_Delay(10);
 800029a:	200a      	movs	r0, #10
 800029c:	f000 fc3c 	bl	8000b18 <HAL_Delay>

    // Software reset
    HX8357_WriteCommand(display, HX8357_SWRESET);
 80002a0:	2101      	movs	r1, #1
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f7ff ffda 	bl	800025c <HX8357_WriteCommand>
    HAL_Delay(100);
 80002a8:	2064      	movs	r0, #100	@ 0x64
 80002aa:	f000 fc35 	bl	8000b18 <HAL_Delay>

    // Exit sleep
    HX8357_WriteCommand(display, HX8357_SLPOUT);
 80002ae:	2111      	movs	r1, #17
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ffd3 	bl	800025c <HX8357_WriteCommand>
    HAL_Delay(120);
 80002b6:	2078      	movs	r0, #120	@ 0x78
 80002b8:	f000 fc2e 	bl	8000b18 <HAL_Delay>

    // Basic display initialization commands will go here
    // (Will expand later)
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 fbb1 	bl	8000a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f80c 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f000 f88e 	bl	80003f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d4:	f000 f84e 	bl	8000374 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  HX8357_Init(&display);
 80002d8:	4802      	ldr	r0, [pc, #8]	@ (80002e4 <main+0x20>)
 80002da:	f7ff ffda 	bl	8000292 <HX8357_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002de:	bf00      	nop
 80002e0:	e7fd      	b.n	80002de <main+0x1a>
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b096      	sub	sp, #88	@ 0x58
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	2244      	movs	r2, #68	@ 0x44
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 f9b4 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800030a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800030e:	f000 fed7 	bl	80010c0 <HAL_PWREx_ControlVoltageScaling>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000318:	f000 fab2 	bl	8000880 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800031c:	2310      	movs	r3, #16
 800031e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000328:	2360      	movs	r3, #96	@ 0x60
 800032a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032c:	2300      	movs	r3, #0
 800032e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	4618      	mov	r0, r3
 8000336:	f000 ff77 	bl	8001228 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000340:	f000 fa9e 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000358:	463b      	mov	r3, r7
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fb7d 	bl	8001a5c <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000368:	f000 fa8a 	bl	8000880 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3758      	adds	r7, #88	@ 0x58
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000378:	4b1b      	ldr	r3, [pc, #108]	@ (80003e8 <MX_SPI1_Init+0x74>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <MX_SPI1_Init+0x78>)
 800037c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <MX_SPI1_Init+0x74>)
 8000380:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000386:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800038c:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <MX_SPI1_Init+0x74>)
 800038e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000392:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <MX_SPI1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039a:	4b13      	ldr	r3, [pc, #76]	@ (80003e8 <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003aa:	2210      	movs	r2, #16
 80003ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003c2:	2207      	movs	r2, #7
 80003c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003ce:	2208      	movs	r2, #8
 80003d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	@ (80003e8 <MX_SPI1_Init+0x74>)
 80003d4:	f001 fdc8 	bl	8001f68 <HAL_SPI_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003de:	f000 fa4f 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000003c 	.word	0x2000003c
 80003ec:	40013000 	.word	0x40013000

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08e      	sub	sp, #56	@ 0x38
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000406:	4bb2      	ldr	r3, [pc, #712]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	4ab1      	ldr	r2, [pc, #708]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000412:	4baf      	ldr	r3, [pc, #700]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000416:	f003 0310 	and.w	r3, r3, #16
 800041a:	623b      	str	r3, [r7, #32]
 800041c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4bac      	ldr	r3, [pc, #688]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4aab      	ldr	r2, [pc, #684]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4ba9      	ldr	r3, [pc, #676]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0304 	and.w	r3, r3, #4
 8000432:	61fb      	str	r3, [r7, #28]
 8000434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4ba6      	ldr	r3, [pc, #664]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4aa5      	ldr	r2, [pc, #660]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800043c:	f043 0320 	orr.w	r3, r3, #32
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4ba3      	ldr	r3, [pc, #652]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	61bb      	str	r3, [r7, #24]
 800044c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044e:	4ba0      	ldr	r3, [pc, #640]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a9f      	ldr	r2, [pc, #636]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045a:	4b9d      	ldr	r3, [pc, #628]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b9a      	ldr	r3, [pc, #616]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	4a99      	ldr	r2, [pc, #612]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000472:	4b97      	ldr	r3, [pc, #604]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b94      	ldr	r3, [pc, #592]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	4a93      	ldr	r2, [pc, #588]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048a:	4b91      	ldr	r3, [pc, #580]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000496:	4b8e      	ldr	r3, [pc, #568]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	4a8d      	ldr	r2, [pc, #564]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 800049c:	f043 0308 	orr.w	r3, r3, #8
 80004a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004a2:	4b8b      	ldr	r3, [pc, #556]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	f003 0308 	and.w	r3, r3, #8
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004ae:	4b88      	ldr	r3, [pc, #544]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	4a87      	ldr	r2, [pc, #540]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 80004b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ba:	4b85      	ldr	r3, [pc, #532]	@ (80006d0 <MX_GPIO_Init+0x2e0>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80004c6:	f000 fe9f 	bl	8001208 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80004d0:	4880      	ldr	r0, [pc, #512]	@ (80006d4 <MX_GPIO_Init+0x2e4>)
 80004d2:	f000 fdbd 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004d6:	230c      	movs	r3, #12
 80004d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004e6:	230d      	movs	r3, #13
 80004e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ee:	4619      	mov	r1, r3
 80004f0:	4879      	ldr	r0, [pc, #484]	@ (80006d8 <MX_GPIO_Init+0x2e8>)
 80004f2:	f000 fc1b 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80004f6:	2307      	movs	r3, #7
 80004f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004fa:	2312      	movs	r3, #18
 80004fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000506:	2304      	movs	r3, #4
 8000508:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800050a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800050e:	4619      	mov	r1, r3
 8000510:	4872      	ldr	r0, [pc, #456]	@ (80006dc <MX_GPIO_Init+0x2ec>)
 8000512:	f000 fc0b 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000526:	230d      	movs	r3, #13
 8000528:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052e:	4619      	mov	r1, r3
 8000530:	486a      	ldr	r0, [pc, #424]	@ (80006dc <MX_GPIO_Init+0x2ec>)
 8000532:	f000 fbfb 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000536:	233f      	movs	r3, #63	@ 0x3f
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800053a:	230b      	movs	r3, #11
 800053c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000546:	4619      	mov	r1, r3
 8000548:	4865      	ldr	r0, [pc, #404]	@ (80006e0 <MX_GPIO_Init+0x2f0>)
 800054a:	f000 fbef 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054e:	2301      	movs	r3, #1
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800055e:	2301      	movs	r3, #1
 8000560:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056c:	f000 fbde 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000570:	230a      	movs	r3, #10
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000574:	230b      	movs	r3, #11
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fbd1 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800058a:	2301      	movs	r3, #1
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a2:	4619      	mov	r1, r3
 80005a4:	484f      	ldr	r0, [pc, #316]	@ (80006e4 <MX_GPIO_Init+0x2f4>)
 80005a6:	f000 fbc1 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005aa:	2302      	movs	r3, #2
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005ae:	230b      	movs	r3, #11
 80005b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ba:	4619      	mov	r1, r3
 80005bc:	4849      	ldr	r0, [pc, #292]	@ (80006e4 <MX_GPIO_Init+0x2f4>)
 80005be:	f000 fbb5 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80005c2:	2344      	movs	r3, #68	@ 0x44
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d2:	4619      	mov	r1, r3
 80005d4:	4843      	ldr	r0, [pc, #268]	@ (80006e4 <MX_GPIO_Init+0x2f4>)
 80005d6:	f000 fba9 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005da:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f4:	4619      	mov	r1, r3
 80005f6:	4838      	ldr	r0, [pc, #224]	@ (80006d8 <MX_GPIO_Init+0x2e8>)
 80005f8:	f000 fb98 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80005fc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800060e:	2303      	movs	r3, #3
 8000610:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000616:	4619      	mov	r1, r3
 8000618:	482f      	ldr	r0, [pc, #188]	@ (80006d8 <MX_GPIO_Init+0x2e8>)
 800061a:	f000 fb87 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800061e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000630:	2301      	movs	r3, #1
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000638:	4619      	mov	r1, r3
 800063a:	482a      	ldr	r0, [pc, #168]	@ (80006e4 <MX_GPIO_Init+0x2f4>)
 800063c:	f000 fb76 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000640:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000652:	230d      	movs	r3, #13
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065a:	4619      	mov	r1, r3
 800065c:	4821      	ldr	r0, [pc, #132]	@ (80006e4 <MX_GPIO_Init+0x2f4>)
 800065e:	f000 fb65 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000662:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000674:	230e      	movs	r3, #14
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067c:	4619      	mov	r1, r3
 800067e:	4819      	ldr	r0, [pc, #100]	@ (80006e4 <MX_GPIO_Init+0x2f4>)
 8000680:	f000 fb54 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000684:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000696:	2307      	movs	r3, #7
 8000698:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <MX_GPIO_Init+0x2e4>)
 80006a2:	f000 fb43 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006a6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_GPIO_Init+0x2e4>)
 80006c0:	f000 fb34 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006ce:	e00b      	b.n	80006e8 <MX_GPIO_Init+0x2f8>
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000c00 	.word	0x48000c00
 80006d8:	48001000 	.word	0x48001000
 80006dc:	48001400 	.word	0x48001400
 80006e0:	48000800 	.word	0x48000800
 80006e4:	48000400 	.word	0x48000400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80006f0:	2308      	movs	r3, #8
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	485c      	ldr	r0, [pc, #368]	@ (800086c <MX_GPIO_Init+0x47c>)
 80006fc:	f000 fb16 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000710:	230d      	movs	r3, #13
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	4855      	ldr	r0, [pc, #340]	@ (8000870 <MX_GPIO_Init+0x480>)
 800071c:	f000 fb06 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000730:	2302      	movs	r3, #2
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	484d      	ldr	r0, [pc, #308]	@ (8000870 <MX_GPIO_Init+0x480>)
 800073c:	f000 faf6 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000740:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000752:	230c      	movs	r3, #12
 8000754:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075a:	4619      	mov	r1, r3
 800075c:	4844      	ldr	r0, [pc, #272]	@ (8000870 <MX_GPIO_Init+0x480>)
 800075e:	f000 fae5 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000762:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000774:	230a      	movs	r3, #10
 8000776:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f000 fad3 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f000 fac5 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007b2:	2309      	movs	r3, #9
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	482d      	ldr	r0, [pc, #180]	@ (8000874 <MX_GPIO_Init+0x484>)
 80007be:	f000 fab5 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c2:	2304      	movs	r3, #4
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007d2:	230c      	movs	r3, #12
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4825      	ldr	r0, [pc, #148]	@ (8000874 <MX_GPIO_Init+0x484>)
 80007de:	f000 faa5 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007e2:	2378      	movs	r3, #120	@ 0x78
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f2:	2307      	movs	r3, #7
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	481d      	ldr	r0, [pc, #116]	@ (8000874 <MX_GPIO_Init+0x484>)
 80007fe:	f000 fa95 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000802:	2338      	movs	r3, #56	@ 0x38
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000812:	2306      	movs	r3, #6
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4816      	ldr	r0, [pc, #88]	@ (8000878 <MX_GPIO_Init+0x488>)
 800081e:	f000 fa85 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000828:	2312      	movs	r3, #18
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000834:	2304      	movs	r3, #4
 8000836:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_GPIO_Init+0x488>)
 8000840:	f000 fa74 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000854:	2302      	movs	r3, #2
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	4807      	ldr	r0, [pc, #28]	@ (800087c <MX_GPIO_Init+0x48c>)
 8000860:	f000 fa64 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	@ 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48001800 	.word	0x48001800
 8000870:	48000800 	.word	0x48000800
 8000874:	48000c00 	.word	0x48000c00
 8000878:	48000400 	.word	0x48000400
 800087c:	48001000 	.word	0x48001000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <HAL_SPI_MspInit+0x7c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d128      	bne.n	8000948 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <HAL_SPI_MspInit+0x80>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <HAL_SPI_MspInit+0x80>)
 80008fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000900:	6613      	str	r3, [r2, #96]	@ 0x60
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_SPI_MspInit+0x80>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_SPI_MspInit+0x80>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <HAL_SPI_MspInit+0x80>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_SPI_MspInit+0x80>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23f0      	movs	r3, #240	@ 0xf0
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000936:	2305      	movs	r3, #5
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f000 f9f2 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40013000 	.word	0x40013000
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f893 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f001 fe33 	bl	8002674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0e:	f7ff fc59 	bl	80002c4 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a20:	0800271c 	.word	0x0800271c
  ldr r2, =_sbss
 8000a24:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a28:	200000a4 	.word	0x200000a4

08000a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>

08000a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f943 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f80e 	bl	8000a60 <HAL_InitTick>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	e001      	b.n	8000a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a50:	f7ff ff1c 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_InitTick+0x6c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d023      	beq.n	8000abc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_InitTick+0x70>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f941 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10f      	bne.n	8000ab6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d809      	bhi.n	8000ab0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f919 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_InitTick+0x74>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e007      	b.n	8000ac0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e004      	b.n	8000ac0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e001      	b.n	8000ac0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000001c 	.word	0x2000001c
 8000ad0:	20000014 	.word	0x20000014
 8000ad4:	20000018 	.word	0x20000018

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	2000001c 	.word	0x2000001c
 8000afc:	200000a0 	.word	0x200000a0

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000a0 	.word	0x200000a0

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000001c 	.word	0x2000001c

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5c 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e166      	b.n	800100a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8158 	beq.w	8001004 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 0201 	and.w	r2, r3, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	6939      	ldr	r1, [r7, #16]
 8000e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0203 	and.w	r2, r3, #3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80b2 	beq.w	8001004 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b61      	ldr	r3, [pc, #388]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea4:	4a60      	ldr	r2, [pc, #384]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eac:	4b5e      	ldr	r3, [pc, #376]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ee2:	d02b      	beq.n	8000f3c <HAL_GPIO_Init+0x210>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d025      	beq.n	8000f38 <HAL_GPIO_Init+0x20c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a51      	ldr	r2, [pc, #324]	@ (8001034 <HAL_GPIO_Init+0x308>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d01f      	beq.n	8000f34 <HAL_GPIO_Init+0x208>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <HAL_GPIO_Init+0x30c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d019      	beq.n	8000f30 <HAL_GPIO_Init+0x204>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4f      	ldr	r2, [pc, #316]	@ (800103c <HAL_GPIO_Init+0x310>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d013      	beq.n	8000f2c <HAL_GPIO_Init+0x200>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4e      	ldr	r2, [pc, #312]	@ (8001040 <HAL_GPIO_Init+0x314>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <HAL_GPIO_Init+0x1fc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8001044 <HAL_GPIO_Init+0x318>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x1f8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_GPIO_Init+0x31c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_GPIO_Init+0x1f4>
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	e00e      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f20:	2308      	movs	r3, #8
 8000f22:	e00c      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f24:	2306      	movs	r3, #6
 8000f26:	e00a      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f28:	2305      	movs	r3, #5
 8000f2a:	e008      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4e:	4937      	ldr	r1, [pc, #220]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f80:	4a32      	ldr	r2, [pc, #200]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f86:	4b31      	ldr	r3, [pc, #196]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000faa:	4a28      	ldr	r2, [pc, #160]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffe:	4a13      	ldr	r2, [pc, #76]	@ (800104c <HAL_GPIO_Init+0x320>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f ae91 	bne.w	8000d3c <HAL_GPIO_Init+0x10>
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000800 	.word	0x48000800
 8001038:	48000c00 	.word	0x48000c00
 800103c:	48001000 	.word	0x48001000
 8001040:	48001400 	.word	0x48001400
 8001044:	48001800 	.word	0x48001800
 8001048:	48001c00 	.word	0x48001c00
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800106c:	e002      	b.n	8001074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001084:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800108c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001090:	d102      	bne.n	8001098 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001096:	e00b      	b.n	80010b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010a6:	d102      	bne.n	80010ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	e000      	b.n	80010b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80010ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40007000 	.word	0x40007000

080010c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d141      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ce:	4b4b      	ldr	r3, [pc, #300]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010da:	d131      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010dc:	4b47      	ldr	r3, [pc, #284]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e2:	4a46      	ldr	r2, [pc, #280]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	4b43      	ldr	r3, [pc, #268]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f4:	4a41      	ldr	r2, [pc, #260]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2232      	movs	r2, #50	@ 0x32
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a3f      	ldr	r2, [pc, #252]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001112:	e002      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001126:	d102      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f2      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112e:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113a:	d158      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e057      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800114c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001150:	e04d      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001158:	d141      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001166:	d131      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2232      	movs	r2, #50	@ 0x32
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119e:	e002      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b2:	d102      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f2      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c6:	d112      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e011      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011dc:	e007      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40007000 	.word	0x40007000
 8001200:	20000014 	.word	0x20000014
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_PWREx_EnableVddIO2+0x1c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6053      	str	r3, [r2, #4]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f000 bc08 	b.w	8001a4c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123c:	4b96      	ldr	r3, [pc, #600]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001246:	4b94      	ldr	r3, [pc, #592]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80e4 	beq.w	8001426 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d007      	beq.n	8001274 <HAL_RCC_OscConfig+0x4c>
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	f040 808b 	bne.w	8001382 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b01      	cmp	r3, #1
 8001270:	f040 8087 	bne.w	8001382 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001274:	4b88      	ldr	r3, [pc, #544]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x64>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e3df      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	4b81      	ldr	r3, [pc, #516]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_RCC_OscConfig+0x7e>
 800129c:	4b7e      	ldr	r3, [pc, #504]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012a4:	e005      	b.n	80012b2 <HAL_RCC_OscConfig+0x8a>
 80012a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d223      	bcs.n	80012fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fd94 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3c0      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ca:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a72      	ldr	r2, [pc, #456]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b70      	ldr	r3, [pc, #448]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	496d      	ldr	r1, [pc, #436]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	4968      	ldr	r1, [pc, #416]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e025      	b.n	800134a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a65      	ldr	r2, [pc, #404]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b63      	ldr	r3, [pc, #396]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4960      	ldr	r1, [pc, #384]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131c:	4b5e      	ldr	r3, [pc, #376]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	495b      	ldr	r1, [pc, #364]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fd54 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e380      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800134a:	f000 fcc1 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	4950      	ldr	r1, [pc, #320]	@ (800149c <HAL_RCC_OscConfig+0x274>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	4a4e      	ldr	r2, [pc, #312]	@ (80014a0 <HAL_RCC_OscConfig+0x278>)
 8001368:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800136a:	4b4e      	ldr	r3, [pc, #312]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb76 	bl	8000a60 <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d052      	beq.n	8001424 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	e364      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d032      	beq.n	80013f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138a:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a42      	ldr	r2, [pc, #264]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001396:	f7ff fbb3 	bl	8000b00 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139e:	f7ff fbaf 	bl	8000b00 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e34d      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b0:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013bc:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a35      	ldr	r2, [pc, #212]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4930      	ldr	r1, [pc, #192]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	492b      	ldr	r1, [pc, #172]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
 80013ee:	e01a      	b.n	8001426 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f0:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb80 	bl	8000b00 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001404:	f7ff fb7c 	bl	8000b00 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e31a      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1dc>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d073      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x21c>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d10e      	bne.n	800145c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d10b      	bne.n	800145c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d063      	beq.n	8001518 <HAL_RCC_OscConfig+0x2f0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d15f      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2f7      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x24c>
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e025      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800147c:	d114      	bne.n	80014a8 <HAL_RCC_OscConfig+0x280>
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a02      	ldr	r2, [pc, #8]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e013      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001498:	40021000 	.word	0x40021000
 800149c:	080026d4 	.word	0x080026d4
 80014a0:	20000014 	.word	0x20000014
 80014a4:	20000018 	.word	0x20000018
 80014a8:	4ba0      	ldr	r3, [pc, #640]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a9f      	ldr	r2, [pc, #636]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b9d      	ldr	r3, [pc, #628]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a9c      	ldr	r2, [pc, #624]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb1a 	bl	8000b00 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb16 	bl	8000b00 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e2b4      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b92      	ldr	r3, [pc, #584]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2a8>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb06 	bl	8000b00 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb02 	bl	8000b00 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e2a0      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d0>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d060      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x310>
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d119      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d116      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	4b7c      	ldr	r3, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x328>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e27d      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b76      	ldr	r3, [pc, #472]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	4973      	ldr	r1, [pc, #460]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	e040      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	4b6f      	ldr	r3, [pc, #444]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6e      	ldr	r2, [pc, #440]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fac1 	bl	8000b00 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fabd 	bl	8000b00 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e25b      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	4b65      	ldr	r3, [pc, #404]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b62      	ldr	r3, [pc, #392]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	495f      	ldr	r1, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5c      	ldr	r2, [pc, #368]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa9d 	bl	8000b00 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fa99 	bl	8000b00 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e237      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03c      	beq.n	800166e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b4b      	ldr	r3, [pc, #300]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001602:	4a4a      	ldr	r2, [pc, #296]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fa78 	bl	8000b00 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fa74 	bl	8000b00 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e212      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x3ec>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163c:	4a3b      	ldr	r2, [pc, #236]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa5b 	bl	8000b00 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa57 	bl	8000b00 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1f5      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001690:	4a26      	ldr	r2, [pc, #152]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	@ 0x58
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d118      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa1e 	bl	8000b00 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff fa1a 	bl	8000b00 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1b8      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x4d8>
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016fe:	e029      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d115      	bne.n	8001734 <HAL_RCC_OscConfig+0x50c>
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	4a07      	ldr	r2, [pc, #28]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171e:	4a03      	ldr	r2, [pc, #12]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
 8001734:	4b9d      	ldr	r3, [pc, #628]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a9c      	ldr	r2, [pc, #624]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	4b99      	ldr	r3, [pc, #612]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a98      	ldr	r2, [pc, #608]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff f9d0 	bl	8000b00 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff f9cc 	bl	8000b00 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e168      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b8c      	ldr	r3, [pc, #560]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <HAL_RCC_OscConfig+0x53c>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff f9b9 	bl	8000b00 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f9b5 	bl	8000b00 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e151      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b80      	ldr	r3, [pc, #512]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b7b      	ldr	r3, [pc, #492]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	4a7a      	ldr	r2, [pc, #488]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03c      	beq.n	800184e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01c      	beq.n	8001816 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017dc:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80017de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e2:	4a72      	ldr	r2, [pc, #456]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f988 	bl	8000b00 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f4:	f7ff f984 	bl	8000b00 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e122      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001806:	4b69      	ldr	r3, [pc, #420]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x5cc>
 8001814:	e01b      	b.n	800184e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001816:	4b65      	ldr	r3, [pc, #404]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181c:	4a63      	ldr	r2, [pc, #396]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff f96b 	bl	8000b00 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182e:	f7ff f967 	bl	8000b00 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e105      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001840:	4b5a      	ldr	r3, [pc, #360]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80f9 	beq.w	8001a4a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b02      	cmp	r3, #2
 800185e:	f040 80cf 	bne.w	8001a00 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001862:	4b52      	ldr	r3, [pc, #328]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0203 	and.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	429a      	cmp	r2, r3
 8001874:	d12c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	3b01      	subs	r3, #1
 8001882:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d123      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001892:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d11b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d113      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d109      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d071      	beq.n	80019b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d068      	beq.n	80019a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d6:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e2:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0ac      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f2:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a2d      	ldr	r2, [pc, #180]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80018f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018fe:	f7ff f8ff 	bl	8000b00 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f8fb 	bl	8000b00 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e099      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <HAL_RCC_OscConfig+0x788>)
 800192a:	4013      	ands	r3, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001934:	3a01      	subs	r2, #1
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800193e:	0212      	lsls	r2, r2, #8
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001946:	0852      	lsrs	r2, r2, #1
 8001948:	3a01      	subs	r2, #1
 800194a:	0552      	lsls	r2, r2, #21
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001952:	0852      	lsrs	r2, r2, #1
 8001954:	3a01      	subs	r2, #1
 8001956:	0652      	lsls	r2, r2, #25
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800195e:	06d2      	lsls	r2, r2, #27
 8001960:	430a      	orrs	r2, r1
 8001962:	4912      	ldr	r1, [pc, #72]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a0c      	ldr	r2, [pc, #48]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001980:	f7ff f8be 	bl	8000b00 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f8ba 	bl	8000b00 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e058      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a6:	e050      	b.n	8001a4a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04f      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d144      	bne.n	8001a4a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a20      	ldr	r2, [pc, #128]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d8:	f7ff f892 	bl	8000b00 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f88e 	bl	8000b00 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e02c      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x7b8>
 80019fe:	e024      	b.n	8001a4a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d01f      	beq.n	8001a46 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f875 	bl	8000b00 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff f871 	bl	8000b00 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4905      	ldr	r1, [pc, #20]	@ (8001a54 <HAL_RCC_OscConfig+0x82c>)
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_RCC_OscConfig+0x830>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e001      	b.n	8001a4a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	feeefffc 	.word	0xfeeefffc

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e11d      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b90      	ldr	r3, [pc, #576]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b8d      	ldr	r3, [pc, #564]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 020f 	bic.w	r2, r3, #15
 8001a8a:	498b      	ldr	r1, [pc, #556]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b89      	ldr	r3, [pc, #548]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e105      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b81      	ldr	r3, [pc, #516]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	497b      	ldr	r1, [pc, #492]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d079      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d11e      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b75      	ldr	r3, [pc, #468]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0dc      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001af6:	f000 f9d1 	bl	8001e9c <RCC_GetSysClockFreqFromPLLSource>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a70      	ldr	r2, [pc, #448]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d946      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b02:	4b6e      	ldr	r3, [pc, #440]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d140      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b16:	4a69      	ldr	r2, [pc, #420]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e035      	b.n	8001b90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2c:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d115      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0b9      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b44:	4b5d      	ldr	r3, [pc, #372]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0ad      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	4b59      	ldr	r3, [pc, #356]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0a5      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b64:	f000 f8b4 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a55      	ldr	r2, [pc, #340]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d90f      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b70:	4b52      	ldr	r3, [pc, #328]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b84:	4a4d      	ldr	r2, [pc, #308]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b90:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 0203 	bic.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4947      	ldr	r1, [pc, #284]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba2:	f7fe ffad 	bl	8000b00 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7fe ffa9 	bl	8000b00 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e077      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 020c 	and.w	r2, r3, #12
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d1eb      	bne.n	8001baa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b80      	cmp	r3, #128	@ 0x80
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bd8:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4a37      	ldr	r2, [pc, #220]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d208      	bcs.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	492b      	ldr	r1, [pc, #172]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c12:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d210      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 020f 	bic.w	r2, r3, #15
 8001c28:	4923      	ldr	r1, [pc, #140]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e036      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4918      	ldr	r1, [pc, #96]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4910      	ldr	r1, [pc, #64]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c80:	f000 f826 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	490c      	ldr	r1, [pc, #48]	@ (8001cc4 <HAL_RCC_ClockConfig+0x268>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <HAL_RCC_ClockConfig+0x26c>)
 8001c9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_RCC_ClockConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fedb 	bl	8000a60 <HAL_InitTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73fb      	strb	r3, [r7, #15]

  return status;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	04c4b400 	.word	0x04c4b400
 8001cc4:	080026d4 	.word	0x080026d4
 8001cc8:	20000014 	.word	0x20000014
 8001ccc:	20000018 	.word	0x20000018

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d121      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d11e      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d10:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	e004      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d134      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d003      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0xac>
 8001d74:	e005      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	e005      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d7e:	617b      	str	r3, [r7, #20]
      break;
 8001d80:	e002      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	617b      	str	r3, [r7, #20]
      break;
 8001d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3301      	adds	r3, #1
 8001d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	fb03 f202 	mul.w	r2, r3, r2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0e5b      	lsrs	r3, r3, #25
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	3301      	adds	r3, #1
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080026e4 	.word	0x080026e4
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e00:	f7ff f93e 	bl	8001080 <HAL_PWREx_GetVoltageRange>
 8001e04:	6178      	str	r0, [r7, #20]
 8001e06:	e014      	b.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f92e 	bl	8001080 <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e38:	d10b      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	@ 0x80
 8001e3e:	d913      	bls.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e44:	d902      	bls.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e00d      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e00a      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e56:	d902      	bls.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e58:	2302      	movs	r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e004      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b70      	cmp	r3, #112	@ 0x70
 8001e62:	d101      	bne.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e64:	2301      	movs	r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 020f 	bic.w	r2, r3, #15
 8001e70:	4909      	ldr	r1, [pc, #36]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40022000 	.word	0x40022000

08001e9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d00b      	beq.n	8001eca <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d825      	bhi.n	8001f04 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d008      	beq.n	8001ed0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d11f      	bne.n	8001f04 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001ec6:	613b      	str	r3, [r7, #16]
    break;
 8001ec8:	e01f      	b.n	8001f0a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001eca:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001ecc:	613b      	str	r3, [r7, #16]
    break;
 8001ece:	e01c      	b.n	8001f0a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e005      	b.n	8001ef8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	613b      	str	r3, [r7, #16]
    break;
 8001f02:	e002      	b.n	8001f0a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
    break;
 8001f08:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	3301      	adds	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	fb03 f202 	mul.w	r2, r3, r2
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0e5b      	lsrs	r3, r3, #25
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f4a:	683b      	ldr	r3, [r7, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	080026e4 	.word	0x080026e4

08001f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e095      	b.n	80020a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f8a:	d009      	beq.n	8001fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
 8001f92:	e005      	b.n	8001fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fc8a 	bl	80008d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fe0:	d902      	bls.n	8001fe8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e002      	b.n	8001fee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001ff6:	d007      	beq.n	8002008 <HAL_SPI_Init+0xa0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002000:	d002      	beq.n	8002008 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	ea42 0103 	orr.w	r1, r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f003 0204 	and.w	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002084:	ea42 0103 	orr.w	r1, r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b088      	sub	sp, #32
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020be:	f7fe fd1f 	bl	8000b00 <HAL_GetTick>
 80020c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d001      	beq.n	80020d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
 80020d6:	e15c      	b.n	8002392 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_SPI_Transmit+0x36>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e154      	b.n	8002392 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_SPI_Transmit+0x48>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e14d      	b.n	8002392 <HAL_SPI_Transmit+0x2e4>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002148:	d10f      	bne.n	800216a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002168:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002174:	2b40      	cmp	r3, #64	@ 0x40
 8002176:	d007      	beq.n	8002188 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002190:	d952      	bls.n	8002238 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_SPI_Transmit+0xf2>
 800219a:	8b7b      	ldrh	r3, [r7, #26]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d145      	bne.n	800222c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	1c9a      	adds	r2, r3, #2
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021c4:	e032      	b.n	800222c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d112      	bne.n	80021fa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	1c9a      	adds	r2, r3, #2
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021f8:	e018      	b.n	800222c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021fa:	f7fe fc81 	bl	8000b00 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d803      	bhi.n	8002212 <HAL_SPI_Transmit+0x164>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d102      	bne.n	8002218 <HAL_SPI_Transmit+0x16a>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0b2      	b.n	8002392 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1c7      	bne.n	80021c6 <HAL_SPI_Transmit+0x118>
 8002236:	e083      	b.n	8002340 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_SPI_Transmit+0x198>
 8002240:	8b7b      	ldrh	r3, [r7, #26]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d177      	bne.n	8002336 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d912      	bls.n	8002276 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	1c9a      	adds	r2, r3, #2
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b02      	subs	r3, #2
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002274:	e05f      	b.n	8002336 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	330c      	adds	r3, #12
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800229c:	e04b      	b.n	8002336 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d12b      	bne.n	8002304 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d912      	bls.n	80022dc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b02      	subs	r3, #2
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022da:	e02c      	b.n	8002336 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002302:	e018      	b.n	8002336 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002304:	f7fe fbfc 	bl	8000b00 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d803      	bhi.n	800231c <HAL_SPI_Transmit+0x26e>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d102      	bne.n	8002322 <HAL_SPI_Transmit+0x274>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e02d      	b.n	8002392 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ae      	bne.n	800229e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f947 	bl	80025d8 <SPI_EndRxTxTransaction>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002390:	2300      	movs	r3, #0
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023ac:	f7fe fba8 	bl	8000b00 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023bc:	f7fe fba0 	bl	8000b00 <HAL_GetTick>
 80023c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023c2:	4b39      	ldr	r3, [pc, #228]	@ (80024a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d2:	e054      	b.n	800247e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d050      	beq.n	800247e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023dc:	f7fe fb90 	bl	8000b00 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d902      	bls.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d13d      	bne.n	800246e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800240a:	d111      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002414:	d004      	beq.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241e:	d107      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800242e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002438:	d10f      	bne.n	800245a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e017      	b.n	800249e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3b01      	subs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d19b      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000014 	.word	0x20000014

080024ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80024be:	f7fe fb1f 	bl	8000b00 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80024ce:	f7fe fb17 	bl	8000b00 <HAL_GetTick>
 80024d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024dc:	4b3d      	ldr	r3, [pc, #244]	@ (80025d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	0d1b      	lsrs	r3, r3, #20
 80024ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80024f4:	e060      	b.n	80025b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80024fc:	d107      	bne.n	800250e <SPI_WaitFifoStateUntilTimeout+0x62>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800250c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d050      	beq.n	80025b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002516:	f7fe faf3 	bl	8000b00 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002522:	429a      	cmp	r2, r3
 8002524:	d902      	bls.n	800252c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13d      	bne.n	80025a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800253a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002544:	d111      	bne.n	800256a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800254e:	d004      	beq.n	800255a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002558:	d107      	bne.n	800256a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002568:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002572:	d10f      	bne.n	8002594 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002592:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e010      	b.n	80025ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d196      	bne.n	80024f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000014 	.word	0x20000014

080025d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff ff5b 	bl	80024ac <SPI_WaitFifoStateUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e027      	b.n	800265c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2200      	movs	r2, #0
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff fec0 	bl	800239c <SPI_WaitFlagStateUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e014      	b.n	800265c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff34 	bl	80024ac <SPI_WaitFifoStateUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e000      	b.n	800265c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <memset>:
 8002664:	4402      	add	r2, r0
 8002666:	4603      	mov	r3, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <__libc_init_array>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	4d0d      	ldr	r5, [pc, #52]	@ (80026ac <__libc_init_array+0x38>)
 8002678:	4c0d      	ldr	r4, [pc, #52]	@ (80026b0 <__libc_init_array+0x3c>)
 800267a:	1b64      	subs	r4, r4, r5
 800267c:	10a4      	asrs	r4, r4, #2
 800267e:	2600      	movs	r6, #0
 8002680:	42a6      	cmp	r6, r4
 8002682:	d109      	bne.n	8002698 <__libc_init_array+0x24>
 8002684:	4d0b      	ldr	r5, [pc, #44]	@ (80026b4 <__libc_init_array+0x40>)
 8002686:	4c0c      	ldr	r4, [pc, #48]	@ (80026b8 <__libc_init_array+0x44>)
 8002688:	f000 f818 	bl	80026bc <_init>
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	2600      	movs	r6, #0
 8002692:	42a6      	cmp	r6, r4
 8002694:	d105      	bne.n	80026a2 <__libc_init_array+0x2e>
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	f855 3b04 	ldr.w	r3, [r5], #4
 800269c:	4798      	blx	r3
 800269e:	3601      	adds	r6, #1
 80026a0:	e7ee      	b.n	8002680 <__libc_init_array+0xc>
 80026a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a6:	4798      	blx	r3
 80026a8:	3601      	adds	r6, #1
 80026aa:	e7f2      	b.n	8002692 <__libc_init_array+0x1e>
 80026ac:	08002714 	.word	0x08002714
 80026b0:	08002714 	.word	0x08002714
 80026b4:	08002714 	.word	0x08002714
 80026b8:	08002718 	.word	0x08002718

080026bc <_init>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr

080026c8 <_fini>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr
